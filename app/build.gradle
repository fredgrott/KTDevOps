apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka-android'

apply plugin: "io.gitlab.arturbosch.detekt"

apply plugin: "com.diffplug.gradle.spotless"

apply plugin: 'jacoco'
project.extensions.extraProperties.set('SpotBugsTask', com.github.spotbugs.SpotBugsTask)
apply plugin: "com.github.spotbugs"


def configs = rootProject.ext.config
def droidxlibs = rootProject.ext.androidxlibs
def thridpartylibs = rootProject.ext.otherlibs

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "${configs.appIdName}"
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


    }
    buildTypes {
        debug {
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "testing", "design"
    productFlavors {

           stagging {
               dimension 'testing'
               minSdkVersion 21
               applicationIdSuffix ".stage"
               versionNameSuffix ".stage"
           }


          // so we can run junit5 android testing to get access to better parameterized testing
          tdd{
              dimension 'testing'
              minSdkVersion 24
              applicationIdSuffix ".tdd"
              versionNameSuffix "-tdd"
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }
          // to run spek testing
          bdd {
              dimension 'testing'
              minSdkVersion 24
              applicationIdSuffix ".bdd"
              versionNameSuffix "-bdd"
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }
          // to run debugbottle
          debugbottle{
              dimension 'testing'
              minSdkVersion 22
              applicationIdSuffix ".debugbottle"
              versionNameSuffix "-debugbottle"
          }
          // to run uiautomator
          uiauto {
              dimension 'testing'
              applicationIdSuffix ".uiauto"
              versionNameSuffix "-uiauto"
          }
         ///u ses  debug overview of Rhym
         //https://github.com/chris-horner/RhythmSticks
        //  https://github.com/Actinarium/Rhythm
        deesigndebug{
            dimension "design"
            applicationIdSuffix ".designdebug"
            versionNameSuffix "-designdebug"
        }
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

detekt {
    defaultProfile {
        input = "$projectDir/src/main/java"
        config = "$projectDir/default-detekt-config.yml"
        filters = ".*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt"
        baseline = file("$projectDir/build/reports/baseline.xml")
    }

}

spotless {
    kotlin {
        target '**/*.kt'
        licenseHeaderFile "$rootDir/license.kt.txt"
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

spotbugs {


    excludeFilter = file("${rootProject}/tools/findbugs-filter.xml")

    // Search better
    effort = 'max'
    // Report all
    reportLevel = 'low'
}

def spotbugsTask = task('spotbugs') {
    description 'Run spotbugs'
    group 'Verification'
}

def spotbugsReports = [ 'Html', 'Xml' ]




dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation droidxlibs.androidxAppcompat
    testImplementation thridpartylibs.junit
    androidTestImplementation droidxlibs.androidxTestRunner
    androidTestUtil droidxlibs.androidxTestOrchestrator
    androidTestImplementation droidxlibs.androidxTestEspressoEsspressoCore
}

android.applicationVariants.all { variant ->
    spotbugsReports.each { reportType ->
        task("spotbugs${reportType}${variant.name.capitalize()}", type: SpotBugsTask, dependsOn: variant.javaCompiler) {
            description "Run spotbugs for ${variant.name}"
            group 'Verification'

            classes = fileTree("build/intermediates/classes/${variant.flavorName}/${variant.buildType.name}/") + fileTree("build/tmp/kotlin-classes/${variant.name}/")
            source = variant.javaCompiler.source

            classpath = variant.javaCompiler.classpath.asFileTree

            reports {
                html.enabled = reportType == 'Html'
                xml.enabled = reportType == 'Xml'

                html.stylesheet resources.text.fromFile('cq-configs/findbugs/findbugs-html.xsl')
            }
        }
    }
}