apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka-android'

apply plugin: "io.gitlab.arturbosch.detekt"

apply plugin: "com.diffplug.gradle.spotless"

apply plugin: "com.jaredsburrows.spoon"

apply plugin: 'jacoco'
project.extensions.extraProperties.set('SpotBugsTask', com.github.spotbugs.SpotBugsTask)
apply plugin: "com.github.spotbugs"

apply plugin: 'kotlin-kapt'


def configs = rootProject.ext.config
def droidxlibs = rootProject.ext.androidxlibs
def thirdpartylibs = rootProject.ext.otherlibs

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "${configs.appIdName}"
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


    }
    buildTypes {
        debug {
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "testing", "design"
    productFlavors {

           stagging {
               dimension 'testing'
               minSdkVersion 21
               applicationIdSuffix ".stage"
               versionNameSuffix ".stage"
           }


          // so we can run junit5 android testing to get access to better parameterized testing
          tdd{
              dimension 'testing'
              minSdkVersion 24
              applicationIdSuffix ".tdd"
              versionNameSuffix "-tdd"
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }
          // to run spek testing
          bdd {
              dimension 'testing'
              minSdkVersion 24
              applicationIdSuffix ".bdd"
              versionNameSuffix "-bdd"
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }
          // to run debugbottle
          debugbottle{
              dimension 'testing'
              minSdkVersion 22
              applicationIdSuffix ".debugbottle"
              versionNameSuffix "-debugbottle"
          }
          // to run uiautomator
          uiauto {
              dimension 'testing'
              applicationIdSuffix ".uiauto"
              versionNameSuffix "-uiauto"
          }
         ///u ses  debug overview of Rhym
         //https://github.com/chris-horner/RhythmSticks
        //  https://github.com/Actinarium/Rhythm
        designdebug{
            dimension "design"
            applicationIdSuffix ".designdebug"
            versionNameSuffix "-designdebug"
        }
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

detekt {
    defaultProfile {
        input = "$projectDir/src/main/java"
        config = "$projectDir/default-detekt-config.yml"
        filters = ".*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt"
        baseline = file("$projectDir/build/reports/baseline.xml")
    }

}

spotless {
    kotlin {
        target '**/*.kt'
        licenseHeaderFile "$rootDir/license.kt.txt"
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

spotbugs {


    excludeFilter = file("${rootProject}/tools/findbugs-filter.xml")

    // Search better
    effort = 'max'
    // Report all
    reportLevel = 'low'
}

def spotbugsTask = task('spotbugs') {
    description 'Run spotbugs'
    group 'Verification'
}

def spotbugsReports = [ 'Html', 'Xml' ]




dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation droidxlibs.androidxAppcompat
    testImplementation thirdpartylibs.junitJunit
    androidTestImplementation droidxlibs.androidxTestRunner
    androidTestUtil droidxlibs.androidxTestOrchestrator
    androidTestImplementation droidxlibs.androidxTestEspressoEsspressoCore
    androidTestImplementation thirdpartylibs.spoonSpoonClient
    androidTestImplementation thirdpartylibs.spoonSpoonRunner
    //how to set this up is at https://github.com/chris-horner/RhythmSticks
    designdebugImplementation thirdpartylibs.rhythmRhythm
    implementation thirdpartylibs.androidMvrx
    implementation thirdpartylibs.kotterKnife
    implementation thirdpartylibs.androidExpoxy
    // Add the annotation processor if you are using Epoxy's annotations (recommended)
    kapt thirdpartylibs.androidExpoxyProcessor
    kapt "org.jetbrains.kotlin.kap:1.3.0"
    implementation( thirdpartylibs.androidExpoxy) { exclude group: 'com.android.support' }
    implementation thirdpartylibs.rxjavaRxjava
    implementation thirdpartylibs.rxjavaRxKotlin
    implementation thirdpartylibs.rxjavaAndroid
    implementation thirdpartylibs.rxgroupsAndroid
}

kapt {
    correctErrorTypes = true
}

android.applicationVariants.all { variant ->
    spotbugsReports.each { reportType ->
        task("spotbugs${reportType}${variant.name.capitalize()}", type: SpotBugsTask, dependsOn: variant.javaCompiler) {
            description "Run spotbugs for ${variant.name}"
            group 'Verification'

            classes = fileTree("build/intermediates/classes/${variant.flavorName}/${variant.buildType.name}/") + fileTree("build/tmp/kotlin-classes/${variant.name}/")
            source = variant.javaCompiler.source

            classpath = variant.javaCompiler.classpath.asFileTree

            reports {
                html.enabled = reportType == 'Html'
                xml.enabled = reportType == 'Xml'

                html.stylesheet resources.text.fromFile('cq-configs/findbugs/findbugs-html.xsl')
            }
        }
    }
}
project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                classDirectories = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: ['**/R.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/*$ViewBinder*.*',
                                   '**/BuildConfig.*',
                                   '**/Manifest*.*']
                )

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}

spoon {
    debug = true

    baseOutputDir = file("$buildDir/custom-report-dir")

    if (project.hasProperty("spoonClassName")) {
        className = project.spoonClassName

        if (project.hasProperty("spoonMethodName")) {
            methodName = project.spoonMethodName
        }
    }

    instrumentationArgs = ["foo:bar"]

    adbTimeout = 30

//  codeCoverage = true

    grantAllPermissions = true
}

configurations.all {
    resolutionStrategy {
        //force deps.orgJacocoAgent
       // force deps.orgJacocoAnt
    }
}
task checkReports() {
    doLast {
        assert project.tasks.spoonDebugAndroidTest != null
        assert project.file("$buildDir/custom-report-dir").exists()
        assert project.file("$buildDir/custom-report-dir/debug").exists()
//    assert project.file("$buildDir/custom-report-dir/debug/coverage").exists()
    }
}